//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface ILoanApplicationsClient {
    getTodoItemsWithPagination(pageNumber: number | undefined, pageSize: number | undefined): Observable<PaginatedListOfLoanApplicationDto>;
    create(command: CreateLoanApplicationCommand): Observable<number>;
    update(id: number, command: UpdateLoanApplicationCommand): Observable<FileResponse>;
    delete(id: number, command: DeleteLoanApplicationCommand): Observable<FileResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class LoanApplicationsClient implements ILoanApplicationsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getTodoItemsWithPagination(pageNumber: number | undefined, pageSize: number | undefined): Observable<PaginatedListOfLoanApplicationDto> {
        let url_ = this.baseUrl + "/api/LoanApplications?";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTodoItemsWithPagination(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTodoItemsWithPagination(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfLoanApplicationDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfLoanApplicationDto>;
        }));
    }

    protected processGetTodoItemsWithPagination(response: HttpResponseBase): Observable<PaginatedListOfLoanApplicationDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfLoanApplicationDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(command: CreateLoanApplicationCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/LoanApplications";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(id: number, command: UpdateLoanApplicationCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/LoanApplications/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    delete(id: number, command: DeleteLoanApplicationCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/LoanApplications/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ISalesTrekkerClient {
    get(pageNumber: number | undefined, pageSize: number | undefined): Observable<PaginatedListOfRootDto>;
}

@Injectable({
    providedIn: 'root'
})
export class SalesTrekkerClient implements ISalesTrekkerClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    get(pageNumber: number | undefined, pageSize: number | undefined): Observable<PaginatedListOfRootDto> {
        let url_ = this.baseUrl + "/api/SalesTrekker?";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfRootDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfRootDto>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<PaginatedListOfRootDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfRootDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class PaginatedListOfLoanApplicationDto implements IPaginatedListOfLoanApplicationDto {
    items?: LoanApplicationDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfLoanApplicationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(LoanApplicationDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfLoanApplicationDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfLoanApplicationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfLoanApplicationDto {
    items?: LoanApplicationDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class LoanApplicationDto implements ILoanApplicationDto {
    isExistingCustomer?: boolean;

    constructor(data?: ILoanApplicationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isExistingCustomer = _data["isExistingCustomer"];
        }
    }

    static fromJS(data: any): LoanApplicationDto {
        data = typeof data === 'object' ? data : {};
        let result = new LoanApplicationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isExistingCustomer"] = this.isExistingCustomer;
        return data;
    }
}

export interface ILoanApplicationDto {
    isExistingCustomer?: boolean;
}

export class CreateLoanApplicationCommand implements ICreateLoanApplicationCommand {
    isExistingCustomer?: boolean;
    introducerCompanyName?: string | undefined;
    brokerId?: string | undefined;
    primaryContact?: string | undefined;
    primaryEmail?: string | undefined;
    secondaryEmail?: string | undefined;
    primaryMobileNumber?: string | undefined;
    secondaryMobileNumber?: string | undefined;
    accNumber?: string | undefined;
    acl?: string | undefined;
    aclHolderId?: string | undefined;
    internalRefinance?: boolean;
    topUp?: boolean;
    restructure?: boolean;
    collectionFormDetail?: string | undefined;
    collectionFormType?: string | undefined;
    brokerDeclarationType?: string | undefined;

    constructor(data?: ICreateLoanApplicationCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isExistingCustomer = _data["isExistingCustomer"];
            this.introducerCompanyName = _data["introducerCompanyName"];
            this.brokerId = _data["brokerId"];
            this.primaryContact = _data["primaryContact"];
            this.primaryEmail = _data["primaryEmail"];
            this.secondaryEmail = _data["secondaryEmail"];
            this.primaryMobileNumber = _data["primaryMobileNumber"];
            this.secondaryMobileNumber = _data["secondaryMobileNumber"];
            this.accNumber = _data["accNumber"];
            this.acl = _data["acl"];
            this.aclHolderId = _data["aclHolderId"];
            this.internalRefinance = _data["internalRefinance"];
            this.topUp = _data["topUp"];
            this.restructure = _data["restructure"];
            this.collectionFormDetail = _data["collectionFormDetail"];
            this.collectionFormType = _data["collectionFormType"];
            this.brokerDeclarationType = _data["brokerDeclarationType"];
        }
    }

    static fromJS(data: any): CreateLoanApplicationCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateLoanApplicationCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isExistingCustomer"] = this.isExistingCustomer;
        data["introducerCompanyName"] = this.introducerCompanyName;
        data["brokerId"] = this.brokerId;
        data["primaryContact"] = this.primaryContact;
        data["primaryEmail"] = this.primaryEmail;
        data["secondaryEmail"] = this.secondaryEmail;
        data["primaryMobileNumber"] = this.primaryMobileNumber;
        data["secondaryMobileNumber"] = this.secondaryMobileNumber;
        data["accNumber"] = this.accNumber;
        data["acl"] = this.acl;
        data["aclHolderId"] = this.aclHolderId;
        data["internalRefinance"] = this.internalRefinance;
        data["topUp"] = this.topUp;
        data["restructure"] = this.restructure;
        data["collectionFormDetail"] = this.collectionFormDetail;
        data["collectionFormType"] = this.collectionFormType;
        data["brokerDeclarationType"] = this.brokerDeclarationType;
        return data;
    }
}

export interface ICreateLoanApplicationCommand {
    isExistingCustomer?: boolean;
    introducerCompanyName?: string | undefined;
    brokerId?: string | undefined;
    primaryContact?: string | undefined;
    primaryEmail?: string | undefined;
    secondaryEmail?: string | undefined;
    primaryMobileNumber?: string | undefined;
    secondaryMobileNumber?: string | undefined;
    accNumber?: string | undefined;
    acl?: string | undefined;
    aclHolderId?: string | undefined;
    internalRefinance?: boolean;
    topUp?: boolean;
    restructure?: boolean;
    collectionFormDetail?: string | undefined;
    collectionFormType?: string | undefined;
    brokerDeclarationType?: string | undefined;
}

export class UpdateLoanApplicationCommand implements IUpdateLoanApplicationCommand {
    id?: number;
    isExistingCustomer?: boolean;
    introducerCompanyName?: string | undefined;
    brokerId?: string | undefined;
    primaryContact?: string | undefined;
    primaryEmail?: string | undefined;
    secondaryEmail?: string | undefined;
    primaryMobileNumber?: string | undefined;
    secondaryMobileNumber?: string | undefined;
    accNumber?: string | undefined;
    acl?: string | undefined;
    aclHolderId?: string | undefined;
    internalRefinance?: boolean;
    topUp?: boolean;
    restructure?: boolean;
    collectionFormDetail?: string | undefined;
    collectionFormType?: string | undefined;
    brokerDeclarationType?: string | undefined;

    constructor(data?: IUpdateLoanApplicationCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.isExistingCustomer = _data["isExistingCustomer"];
            this.introducerCompanyName = _data["introducerCompanyName"];
            this.brokerId = _data["brokerId"];
            this.primaryContact = _data["primaryContact"];
            this.primaryEmail = _data["primaryEmail"];
            this.secondaryEmail = _data["secondaryEmail"];
            this.primaryMobileNumber = _data["primaryMobileNumber"];
            this.secondaryMobileNumber = _data["secondaryMobileNumber"];
            this.accNumber = _data["accNumber"];
            this.acl = _data["acl"];
            this.aclHolderId = _data["aclHolderId"];
            this.internalRefinance = _data["internalRefinance"];
            this.topUp = _data["topUp"];
            this.restructure = _data["restructure"];
            this.collectionFormDetail = _data["collectionFormDetail"];
            this.collectionFormType = _data["collectionFormType"];
            this.brokerDeclarationType = _data["brokerDeclarationType"];
        }
    }

    static fromJS(data: any): UpdateLoanApplicationCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateLoanApplicationCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["isExistingCustomer"] = this.isExistingCustomer;
        data["introducerCompanyName"] = this.introducerCompanyName;
        data["brokerId"] = this.brokerId;
        data["primaryContact"] = this.primaryContact;
        data["primaryEmail"] = this.primaryEmail;
        data["secondaryEmail"] = this.secondaryEmail;
        data["primaryMobileNumber"] = this.primaryMobileNumber;
        data["secondaryMobileNumber"] = this.secondaryMobileNumber;
        data["accNumber"] = this.accNumber;
        data["acl"] = this.acl;
        data["aclHolderId"] = this.aclHolderId;
        data["internalRefinance"] = this.internalRefinance;
        data["topUp"] = this.topUp;
        data["restructure"] = this.restructure;
        data["collectionFormDetail"] = this.collectionFormDetail;
        data["collectionFormType"] = this.collectionFormType;
        data["brokerDeclarationType"] = this.brokerDeclarationType;
        return data;
    }
}

export interface IUpdateLoanApplicationCommand {
    id?: number;
    isExistingCustomer?: boolean;
    introducerCompanyName?: string | undefined;
    brokerId?: string | undefined;
    primaryContact?: string | undefined;
    primaryEmail?: string | undefined;
    secondaryEmail?: string | undefined;
    primaryMobileNumber?: string | undefined;
    secondaryMobileNumber?: string | undefined;
    accNumber?: string | undefined;
    acl?: string | undefined;
    aclHolderId?: string | undefined;
    internalRefinance?: boolean;
    topUp?: boolean;
    restructure?: boolean;
    collectionFormDetail?: string | undefined;
    collectionFormType?: string | undefined;
    brokerDeclarationType?: string | undefined;
}

export class DeleteLoanApplicationCommand implements IDeleteLoanApplicationCommand {
    id?: number;
    isDeleted?: boolean;

    constructor(data?: IDeleteLoanApplicationCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.isDeleted = _data["isDeleted"];
        }
    }

    static fromJS(data: any): DeleteLoanApplicationCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteLoanApplicationCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["isDeleted"] = this.isDeleted;
        return data;
    }
}

export interface IDeleteLoanApplicationCommand {
    id?: number;
    isDeleted?: boolean;
}

export class PaginatedListOfRootDto implements IPaginatedListOfRootDto {
    items?: RootDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfRootDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RootDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfRootDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfRootDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfRootDto {
    items?: RootDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class RootDto implements IRootDto {

    constructor(data?: IRootDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): RootDto {
        data = typeof data === 'object' ? data : {};
        let result = new RootDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IRootDto {
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}